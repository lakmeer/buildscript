
// Require

var fs = require('fs'),
    ErrorReporter = require('errors');


// Export this group of functions directly

module.exports = {

    // Infer file type from extension
    isCoffeescript : function (filename) {

        return /\.(coffee|cs)$/.test(filename);

    },


    // Read contents of given file from disk
    readFile : function (filename) {

        try {

            var fileContents = fs.readFileSync(filename, 'utf-8');

        } catch (e) {

            var errorText = "COMPILER ERROR:\n  " + filename + "\n  ";

            switch (e.code) {

                // More cases to go here as required
                case "ENOENT":
                    errorText += "File does not exist";
                    break;

                default:
                    errorText += "Couldn't read file.\n  Error code - " + e.errno + ":" + e.code + "\n  " + e + "\n";

            }

            return ErrorReporter.report(errorText);

        }

        return fileContents;

    },


    // Take a string, give back an ascii line of equal length
    becomeLine : function (str, char) {

        var line = '', char = char || '-', i = str.length;

        while (i-- > 0) { line += char; }

        return line;

    },


    // Make a complex string printable by javascript functions
    escapeJs : function (str) {

        str = String(str);

        console.log (str);

        return str.replace(/\n/g, '\\n')
                  .replace(/\'/g, "\\'")
                  .replace(/\"/g, '\\"');

    },


    // Return Date.now() with dd/mm/yyyy formatting
    today : function () {

        var d = new Date();
        return String(d.getDate()) + '-' + (d.getMonth() + 1) + '-' + d.getFullYear();

    },


    // Wrap multiline string in /* ... */ to make javascript block comments
    jsCommentString : function (comment) {

        var commentLines  = comment.split('\n'),
            commentString = "/*\n";

        for (var i in commentLines) {
            var thisLine = commentLines[i];
            commentString += " * " + thisLine + "\n";
        }

        return commentString + " *\n */\n\n";

    }

}

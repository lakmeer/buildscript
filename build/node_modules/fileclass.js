
// Require

var cs = require('coffee-script').CoffeeScript,

    Helpers        = require('helpers'),
    ErrorReporter  = require('messenger');



// Class definition

var File = function FileClass (filename, isBare) {

    this.filename = filename;
    this.refresh(isBare);

}


// Class methods

File.prototype.needsCompiling = function _File_needsCompiling () {

    return Helpers.isCoffeescript(this.filename);

}

File.prototype.compile = function _File_compile (isBare) {

    if (this.needsCompiling()) {

        // If contains the string COMPILER ERROR then don't compile
        if (this.src.indexOf('COMPILER ERROR') !== -1) {
            this.compiled = this.src;
            return this.compiled;
        }

        // Now try compiling
        try {

            this.compiled = cs.compile(this.src, { bare : isBare });

        } catch (e) {

            var lineNumberExists = String(e).match(/line (\d+)/),
                errorResponse    = "";

            if (lineNumberExists) {
                var lineNumber = lineNumberExists[1];
                errorResponse = ErrorReporter.report("CoffeeScript Error: \n  " + this.filename + " :: line " + lineNumber + '\n  ' + String(e));
            } else {
                errorResponse = ErrorReporter.report("Unknown error: \n  " + e);
            }

            this.compiled = errorResponse;

        }

    } else {

        this.compiled = this.src;

    }

    if (typeof this.compiled === 'undefined') {
        this.compiled = "/*   No content   */\n";
    }

    return this.compiled;

}

File.prototype.read = function _File_read (filename) {

    return Helpers.readFile(filename);

}

File.prototype.refresh = function _File_refresh (isBare) {

    this.src = this.read(this.filename);
    this.compile(isBare ? true : false);  // Coerce proper bool from truthy/falsey values

}




module.exports = File;

